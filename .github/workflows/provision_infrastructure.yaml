name: voting app deployment to AKS
on:
  workflow_dispatch:
    inputs:
      name:
        type: choice
        description: environment
        default: 'production' 
        options: 
        - dev
        - stage
        - production
 
permissions:
  id-token: write
jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v2
      # - name: install ansible
      #   run: |
      #     sudo pip3 install ansible[azure] -I
      #     ansible-galaxy collection install azure.azcollection
      #     sudo pip install -r ~/.ansible/collections/ansible_collections/azure/azcollection/requirements-azure.txt
      #     sudo pip install docker
      # - name: show ansible version
      #   run: ansible --version
      - name: azure log in using OIDC
        uses: azure/login@v1
        with:
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: 'Run az commands'
        run: |
          echo ${{ github.event.inputs.name }}
          az account show
          az group list
          pwd
      # - name: Build and analysis
      #   env:
      #     resource_group: votingapp-${{ github.event.inputs.name }}-rg
      #     location: southindia
      #     aks_name: votingapp-${{ github.event.inputs.name }}-aks-cluster
      #     tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      #     client_id: ${{ secrets.AZURE_CLIENT_ID_ANSIBLE }}
      #     client_secret: ${{ secrets.AZURE_CLIENT_SECRET}}
      #     subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      #     registry_name: votingapp${{ github.event.inputs.name }}acr
      #   run: ansible-playbook azure_infra_with_ansible/azure_create_aks.yml -e "ansible_python_interpreter=/usr/bin/python3 resource_group=$resource_group location=$location client_id=$client_id client_secret=$client_secret aks_name=$aks_name registry_name=$registry_name"

      # - name: 'Run az commands'
      #   run: |
      #     az acr credential show -n votingapp${{ github.event.inputs.name }}acr --query username
      #     az acr credential show -n votingapp${{ github.event.inputs.name }}acr --query passwords[0].value
      
      # - name: Build vote docker image
      #   run: |
      #     docker build ./vote/. -t votingapp${{ github.event.inputs.name }}acr.azurecr.io/vote:latest
      
      # - name: Push vote Image to ACR in dev
      #   run: |
      #     docker push votingapp${{ github.event.inputs.name }}acr.azurecr.io/vote:latest
      
      # - name: Build result docker image
      #   run: |
      #     docker build ./result/. -t votingapp${{ github.event.inputs.name }}acr.azurecr.io/result:latest
      
      # - name: Push result Image to ACR in dev
      #   run: |
      #     docker push votingapp${{ github.event.inputs.name }}acr.azurecr.io/result:latest
      
      # - name: Build worker docker image
      #   run: |
      #     docker build ./worker/. -t votingapp${{ github.event.inputs.name }}acr.azurecr.io/worker:latest
      
      # - name: Push worker Image to ACR in dev
      #   run: |
      #     docker push votingapp${{ github.event.inputs.name }}acr.azurecr.io/worker:latest
      
      - name: AKS set context
        env:
          resource_group: votingapp-${{ github.event.inputs.name }}-rg
          aks_name: votingapp-${{ github.event.inputs.name }}-aks-cluster
        run: |
          az aks get-credentials --resource-group $resource_group --name $aks_name
      
      - name: create namespace
        uses: azure/k8s-actions/k8s-deploy@master
        with:
          manifests: |
            kubernetes_manifests/namespace.yaml
      
      - name: deploy redis on AKS
        uses: azure/k8s-actions/k8s-deploy@master
        with:
          namespace: votingapp
          manifests: |
            kubernetes_manifests/redis-deployment.yaml
            kubernetes_manifests/redis-service.yaml
      
      - name: deploy postgres db on AKS
        uses: azure/k8s-actions/k8s-deploy@master
        with:
          namespace: votingapp
          manifests: |
            kubernetes_manifests/database-deployment.yaml
            kubernetes_manifests/database-service.yaml
      
      - name: deploy vote on AKS
        uses: azure/k8s-actions/k8s-deploy@master
        with:
          namespace: votingapp
          manifests: |
            kubernetes_manifests/vote-deployment.yaml
            kubernetes_manifests/vote-service.yaml
          images: |
           votingapp${{ github.event.inputs.name }}acr.azurecr.io/vote:latest
      
      - name: deploy redis on AKS
        uses: azure/k8s-actions/k8s-deploy@master
        with:
          namespace: votingapp
          manifests: |
            kubernetes_manifests/result-deployment.yaml
            kubernetes_manifests/result-service.yaml
          images: |
           votingapp${{ github.event.inputs.name }}acr.azurecr.io/result:latest
      
      - name: deploy redis on AKS
        uses: azure/k8s-actions/k8s-deploy@master
        with:
          namespace: votingapp
          manifests: |
            kubernetes_manifests/worker-deployment.yaml
            kubernetes_manifests/worker-service.yaml
          images: |
           votingapp${{ github.event.inputs.name }}acr.azurecr.io/worker:latest