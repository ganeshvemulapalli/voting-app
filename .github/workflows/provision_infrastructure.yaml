name: voting app deployment to AKS
on:
  workflow_dispatch:
    inputs:
      name:
        type: choice
        description: environment
        default: 'production' 
        options: 
        - dev
        - stage
        - production
 
permissions:
  id-token: write

jobs:
  Voting_Application_Deployment:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      # - name: install ansible with azure collections, docker to test login
      #   run: |
      #     sudo pip3 install ansible[azure] -I
      #     ansible-galaxy collection install azure.azcollection
      #     sudo pip install -r ~/.ansible/collections/ansible_collections/azure/azcollection/requirements-azure.txt
      #     sudo pip install docker

      - name: azure log in using OIDC
        uses: azure/login@v1
        with:
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # - name: Create RG, AKS and ACR with ansible
      #   env:
      #     resource_group: votingapp-${{ github.event.inputs.name }}-rg
      #     location: southindia
      #     aks_name: votingapp-${{ github.event.inputs.name }}-aks-cluster
      #     tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      #     client_id: ${{ secrets.AZURE_CLIENT_ID_ANSIBLE }}
      #     client_secret: ${{ secrets.AZURE_CLIENT_SECRET_ANSIBLE}}
      #     subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      #     registry_name: votingapp${{ github.event.inputs.name }}acr
      #   run: ansible-playbook azure_infra_with_ansible/azure_create_aks.yml -e "ansible_python_interpreter=/usr/bin/python3 resource_group=$resource_group location=$location client_id=$client_id client_secret=$client_secret aks_name=$aks_name registry_name=$registry_name"
      
      # - name: Build vote docker image
      #   run: |
      #     docker build ./vote/. -t votingapp${{ github.event.inputs.name }}acr.azurecr.io/vote:latest
      
      # - name: Push vote Image to ACR in dev
      #   run: |
      #     docker push votingapp${{ github.event.inputs.name }}acr.azurecr.io/vote:latest
      
      # - name: Build result docker image
      #   run: |
      #     docker build ./result/. -t votingapp${{ github.event.inputs.name }}acr.azurecr.io/result:latest
      
      # - name: Push result Image to ACR in dev
      #   run: |
      #     docker push votingapp${{ github.event.inputs.name }}acr.azurecr.io/result:latest
      
      # - name: Build worker docker image
      #   run: |
      #     docker build ./worker/. -t votingapp${{ github.event.inputs.name }}acr.azurecr.io/worker:latest
      
      # - name: Push worker Image to ACR in dev
      #   run: |
      #     docker push votingapp${{ github.event.inputs.name }}acr.azurecr.io/worker:latest
      
      - name: acr login
        run: |
          az acr credential show -n votingapp${{ github.event.inputs.name }}acr.azurecr.io --query username
          az acr credential show -n votingapp${{ github.event.inputs.name }}acr.azurecr.io --query passwords[0].value
      
      - uses: azure/aks-set-context@v2.0
        name: AKS set context
        with:
          resource-group: votingapp-${{ github.event.inputs.name }}-rg
          cluster-name: votingapp-${{ github.event.inputs.name }}-aks-cluster
      
      - name: create namespace
        uses: azure/k8s-actions/k8s-deploy@master
        with:
          manifests: |
            kubernetes_manifests/namespace.yaml

      - uses: cschleiden/replace-tokens@v1
        name: replaces string for docker images and postgres credentials
        with:
          files: '["**/*.yaml"]'
        env:
          acr_env: ${{ github.event.inputs.name }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
     
      - name: deploy redis on AKS
        uses: azure/k8s-actions/k8s-deploy@master
        with:
          namespace: votingapp
          manifests: |
            kubernetes_manifests/redis-deployment.yaml
            kubernetes_manifests/redis-service.yaml
            kubernetes_manifests/hpa-redis-deployment.yaml
      
      - name: deploy postgres db on AKS
        uses: azure/k8s-actions/k8s-deploy@master
        with:
          namespace: votingapp
          manifests: |
            kubernetes_manifests/database-deployment.yaml
            kubernetes_manifests/database-service.yaml
            kubernetes_manifests/hpa-database-deployment.yaml

      - name: 'Docker login in ACR'
        uses: azure/docker-login@v1
        with:
           login-server: votingapp${{ github.event.inputs.name }}acr.azurecr.io
           username: votingapp${{ github.event.inputs.name }}acr
           password: "NamLh0C64yEi=7/Q/GrZvyhERth7lEoe"

      - name: deploy vote on AKS
        uses: azure/k8s-actions/k8s-deploy@master
        with:
          namespace: votingapp
          manifests: |
            kubernetes_manifests/vote-deployment.yaml
            kubernetes_manifests/vote-service.yaml
            kubernetes_manifests/hpa-vote-deployment.yaml
      
      - name: deploy result on AKS
        uses: azure/k8s-actions/k8s-deploy@master
        with:
          namespace: votingapp
          manifests: |
            kubernetes_manifests/result-deployment.yaml
            kubernetes_manifests/result-service.yaml
            kubernetes_manifests/hpa-result-deployment.yaml
      
      - name: deploy worker on AKS
        uses: azure/k8s-actions/k8s-deploy@master
        with:
          namespace: votingapp
          manifests: |
            kubernetes_manifests/worker-deployment.yaml
            kubernetes_manifests/worker-service.yaml
            kubernetes_manifests/hpa-worker-deployment.yaml
